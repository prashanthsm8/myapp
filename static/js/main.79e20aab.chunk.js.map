{"version":3,"sources":["Components/Card/Card.jsx","Components/Card-list/CardList.jsx","Components/search-box/Searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","name","CardList","monsters","map","key","Searchbox","placeholder","handleevent","type","onChange","App","handleChange","e","setState","searchval","target","value","state","fetch","then","Response","json","users","tempmons","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAGaA,G,kBAAO,SAACC,GAEjB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,4BAAMJ,EAAMG,QAAQE,SCHfC,EAAU,SAACN,GAEnB,OAAQ,yBAAKC,UAAU,aAEjBD,EAAMO,SAASC,KAAI,SAACL,GAAD,OACf,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,SCNlCO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,YAAd,OACrB,2BAAOD,YAAaA,EAAaE,KAAK,SAAUZ,UAAU,SAClDa,SAAUF,MCqFPG,E,YApCX,aACC,IAAD,8BACE,+CAcFC,aAAa,SAACC,GAEZ,EAAKC,SAAS,CAACC,UAAUF,EAAEG,OAAOC,SAflC,EAAKC,MAAQ,CACXf,SAAW,GACXY,UAAY,IAJhB,E,iFASC,IAAD,OACEI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAASoB,S,+BAQxC,IAAD,OACQC,EAAWC,KAAKP,MAAMf,SAASuB,QACnC,SAAC3B,GAAD,OAAYA,EAAQE,KAAK0B,cAAcC,SAAS,EAAKV,MAAMH,UAAUY,kBAEtE,OACC,yBAAK9B,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWU,YAAY,gBAAgBC,YACnCiB,KAAKb,eAET,kBAAC,EAAD,CAAUT,SAAUqB,S,GAjCZK,IAAMC,WCxCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.79e20aab.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\nexport const Card = (props)=>\r\n{\r\n    return <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h1 >{props.monster.name}</h1>\r\n    </div>\r\n}","import React from 'react';\r\nimport './CardList.css'\r\nimport {Card} from '../Card/Card'\r\n\r\nexport const CardList =(props)=>\r\n{\r\n     return  <div className=\"card-list\">\r\n          \r\n          {props.monsters.map((monster)=>(\r\n               <Card key={monster.id} monster={monster}/>\r\n          ))}</div>;\r\n\r\n};","import React from 'react'\r\nimport './Searchbox.css'\r\n\r\nexport const Searchbox = ({placeholder,handleevent}) => (\r\n    <input placeholder={placeholder} type=\"search\"  className='search'\r\n            onChange={handleevent}\r\n          ></input>\r\n);","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {CardList} from './Components/Card-list/CardList';\r\nimport {Searchbox} from './Components/search-box/Searchbox.jsx';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           HELLO WORLD\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// class App extends React.Component\r\n// {\r\n//     constructor()\r\n//     {\r\n//       super();\r\n//       this.state = {\r\n//         string : 'hi there'\r\n//       }\r\n//     }\r\n//     render()\r\n//     {\r\n//        return (\r\n//         <div className=\"App\">\r\n//         <header className=\"App-header\">\r\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//           <p>\r\n//             {this.state.string}\r\n//           </p>\r\n//           <button onClick={()=>this.setState({string:'prashhh'})}>change state</button>\r\n//         </header>\r\n//       </div>\r\n//        );\r\n//     }\r\n// }\r\n\r\nclass App extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n      super();\r\n      this.state = {\r\n        monsters : [],\r\n        searchval : \"\"\r\n      }\r\n      //this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    componentDidMount()\r\n    {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(Response => Response.json())\r\n      .then(users => this.setState({monsters:users}));\r\n    }\r\n\r\n    handleChange=(e)=>\r\n    {\r\n      this.setState({searchval:e.target.value});\r\n    }\r\n    render()\r\n    {\r\n      const tempmons = this.state.monsters.filter(\r\n        (monster)=> monster.name.toLowerCase().includes(this.state.searchval.toLowerCase())\r\n      );\r\n       return (\r\n        <div className=\"App\">\r\n          <h1>Monsters Rolodex</h1>\r\n          <Searchbox placeholder=\"enter monster\" handleevent={\r\n              this.handleChange\r\n            }></Searchbox>\r\n          <CardList monsters={tempmons}></CardList>\r\n      </div>\r\n       );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}