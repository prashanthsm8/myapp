{"version":3,"sources":["Components/Card/Card.jsx","Components/Card-list/CardList.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","name","CardList","monsters","map","key","App","state","searchval","fetch","then","Response","json","users","setState","tempmons","this","filter","toLowerCase","includes","placeholder","type","onChange","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAGaA,G,kBAAO,SAACC,GAEjB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,4BAAMJ,EAAMG,QAAQE,SCHfC,EAAU,SAACN,GAEnB,OAAQ,yBAAKC,UAAU,aAEjBD,EAAMO,SAASC,KAAI,SAACL,GAAD,OACf,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,SC+EhCO,E,YAnCX,aACC,IAAD,8BACE,+CACKC,MAAQ,CACXJ,SAAW,GACXK,UAAY,IAJhB,E,iFAQC,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACX,SAASU,S,+BAGxC,IAAD,OACQE,EAAWC,KAAKT,MAAMJ,SAASc,QACnC,SAAClB,GAAD,OAAYA,EAAQE,KAAKiB,cAAcC,SAAS,EAAKZ,MAAMC,UAAUU,kBAGtE,OADDF,KAAKT,MAAMR,QAAQgB,EAEjB,yBAAKlB,UAAU,OACb,2BAAOuB,YAAY,gBAAgBC,KAAK,SACtCC,SACE,SAACC,GAEC,EAAKT,SAAS,CAACN,UAAUe,EAAEC,OAAOC,WAIxC,kBAAC,EAAD,CAAUtB,SAAUY,S,GAhCZW,IAAMC,WCvCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.9b54c23e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\nexport const Card = (props)=>\r\n{\r\n    return <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h1 >{props.monster.name}</h1>\r\n    </div>\r\n}","import React from 'react';\r\nimport './CardList.css'\r\nimport {Card} from '../Card/Card'\r\n\r\nexport const CardList =(props)=>\r\n{\r\n     return  <div className=\"card-list\">\r\n          \r\n          {props.monsters.map((monster)=>(\r\n               <Card key={monster.id} monster={monster}/>\r\n          ))}</div>;\r\n\r\n};","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './Components/Card-list/CardList';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           HELLO WORLD\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// class App extends React.Component\n// {\n//     constructor()\n//     {\n//       super();\n//       this.state = {\n//         string : 'hi there'\n//       }\n//     }\n//     render()\n//     {\n//        return (\n//         <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             {this.state.string}\n//           </p>\n//           <button onClick={()=>this.setState({string:'prashhh'})}>change state</button>\n//         </header>\n//       </div>\n//        );\n//     }\n// }\n\nclass App extends React.Component\n{\n    constructor()\n    {\n      super();\n      this.state = {\n        monsters : [],\n        searchval : \"\"\n      }\n    }\n    componentDidMount()\n    {\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(Response => Response.json())\n      .then(users => this.setState({monsters:users}));\n    }\n    render()\n    {\n      const tempmons = this.state.monsters.filter(\n        (monster)=> monster.name.toLowerCase().includes(this.state.searchval.toLowerCase())\n      );\n      this.state.monster=tempmons;\n       return (\n        <div className=\"App\">\n          <input placeholder=\"enter monster\" type=\"search\" \n            onChange={\n              (e)=>\n              {\n                this.setState({searchval:e.target.value});\n              }\n            }\n          ></input>\n          <CardList monsters={tempmons}></CardList>\n      </div>\n       );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}